;; Jettons discoverable smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/discovery-params.fc";
#pragma version >=0.2.0;

;; Global Variables for Timelock and Multisig
global int mint_timing;
global slice proposed_mint_address;
global int proposed_mint_amount;

global slice multisig_address;  ;; The multisig wallet address

global slice proposed_admin;
global int change_admin_timing;

global cell proposed_content;
global int change_content_timing;

const int timelock_duration = 48 * 60 * 60;  ;; 48 hours

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    int total_supply = ds~load_coins();
    slice admin_address = ds~load_msg_addr();
    cell content = ds~load_ref();
    cell jetton_wallet_code = ds~load_ref();
    ds.end_parse(); 

    return (total_supply, admin_address, content, jetton_wallet_code);
}

;; Function to save contract data (total supply, admin, content, and jetton wallet code)
() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .end_cell()
    ).end_parse();
}

;; Function to propose minting tokens (called by multisig)
() propose_mint_tokens(slice to_address, int amount) impure {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    throw_unless(73, equal_slices(sender_address, multisig_address));  ;; Only the multisig wallet can propose
    mint_timing = now() + timelock_duration;  ;; Set a 48-hour timelock
    proposed_mint_address = to_address;
    proposed_mint_amount = amount;
}

;; Function to execute minting after the timelock expires
() execute_mint_tokens() impure {
    throw_unless(74, now() >= mint_timing);  ;; Ensure the timelock period has passed
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    cell master_msg = null();  ;; This can be customized based on your logic
    mint_tokens(proposed_mint_address, jetton_wallet_code, proposed_mint_amount, master_msg);  ;; Mint tokens
    save_data(total_supply + proposed_mint_amount, admin_address, content, jetton_wallet_code);  ;; Update supply
}

;; Function to handle the actual minting process
() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_wallet_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

;; Function to propose an admin change (called by multisig)
() propose_admin_change(slice new_admin_address) impure {
    throw_unless(73, equal_slices(sender_address, multisig_address));  ;; Only the multisig wallet can propose
    change_admin_timing = now() + timelock_duration;  ;; Set a timelock
    proposed_admin = new_admin_address;
}

;; Function to execute the admin change after the timelock expires
() execute_admin_change() impure {
    throw_unless(74, now() >= change_admin_timing);  ;; Ensure the timelock has passed
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    save_data(total_supply, proposed_admin, content, jetton_wallet_code);  ;; Change the admin
}

;; Function to propose a content change (called by multisig)
() propose_content_change(cell new_content) impure {
    throw_unless(73, equal_slices(sender_address, multisig_address));  ;; Only the multisig wallet can propose
    change_content_timing = now() + timelock_duration;  ;; Set a timelock
    proposed_content = new_content;
}

;; Function to execute the content change after the timelock expires
() execute_content_change() impure {
    throw_unless(74, now() >= change_content_timing);  ;; Ensure the timelock has passed
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    save_data(total_supply, admin_address, proposed_content, jetton_wallet_code);  ;; Update content
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of provide_wallet_address cost
    cs.end_parse();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        propose_mint_tokens(to_address, amount);  ;; Propose the minting
        in_msg_body.end_parse();
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
                equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                    .store_slice(response_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::excesses(), 32)
                    .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + const::provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::take_wallet_address(), 32)
                .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        in_msg_body.end_parse();
        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        in_msg_body.end_parse();
        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        in_msg_body.end_parse();
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}